From 8fc0e6f770fc06a6beb2f69daa4f5f21a8a6434e Mon Sep 17 00:00:00 2001
From: hiraditya <hiraditya@gmail.com>
Date: Thu, 24 Nov 2016 18:09:22 -0600
Subject: [PATCH 05/12] remove dead code

---
 lib/Analysis/CFG.cpp | 69 ----------------------------------------------------
 1 file changed, 69 deletions(-)

diff --git a/lib/Analysis/CFG.cpp b/lib/Analysis/CFG.cpp
index 1f6319e..b643451 100644
--- a/lib/Analysis/CFG.cpp
+++ b/lib/Analysis/CFG.cpp
@@ -271,38 +271,7 @@ static bool isPotentiallyReachableInnerNotViaDef(
     if (EndBlocks.find(BB) != EndBlocks.end())
       return true;
 
-#ifdef OPTIMIZED_LIVENESS_ANALYSIS
-    // If curent basicblock, the defblock, and any incoming block of PhiNode are
-    // not within a loop,
-    // we can strip the loop and only add the loop exsit basicblock into the
-    // worklist to make the search shorter
-    if (LI && (DefBB == NULL || !loopContainsBoth(LI, BB, DefBB))) {
-      bool contains = false;
-      for (std::set<BasicBlock *>::iterator itr = EndBlocks.begin(),
-                                            end = EndBlocks.end();
-           itr != end; itr++) {
-        if (loopContainsBoth(LI, BB, *itr)) {
-          contains = true;
-          break;
-        }
-      }
-      if (!contains) {
-        if (const Loop *Outer = getOutermostLoop(LI, BB)) {
-          // All blocks in a single loop are reachable from all other blocks.
-          // From
-          // any of these blocks, we can skip directly to the exits of the loop,
-          // ignoring any other blocks inside the loop body.
-          Outer->getExitBlocks(Worklist);
-        }
-      } else {
-        Worklist.append(succ_begin(BB), succ_end(BB));
-      }
-    } else {
-      Worklist.append(succ_begin(BB), succ_end(BB));
-    }
-#else
     Worklist.append(succ_begin(BB), succ_end(BB));
-#endif
   } while (!Worklist.empty());
 
   // We have exhausted all possible paths and are certain that 'To' can not be
@@ -315,9 +284,6 @@ static bool isPotentiallyReachableInnerNotViaDef(
 bool llvm::isPotentiallyReachableNotViaDef(Instruction *SP, Instruction *USE,
                                            Value *DEF, const DominatorTree *DT,
                                            const LoopInfo *LI) {
-  assert(SP->getParent()->getParent() == USE->getParent()->getParent() &&
-         "This analysis is function-local!");
-
   SmallVector<BasicBlock *, 32> Worklist;
 
   bool DefIsArg = isa<Argument>(DEF);
@@ -380,17 +346,6 @@ bool llvm::isPotentiallyReachableNotViaDef(Instruction *SP, Instruction *USE,
       if (!isa<PHINode>(USE)) {
         return false;
       }
-#ifdef OPTIMIZED_LIVENESS_ANALYSIS
-      else { // If use is a PHINode, it should be at the beginning of the
-             // basicblock, we need to treat it specially and see if we reach
-             // the use via its incoming block
-        // this is fastpath to see if there is a backedge directly from the
-        // current basicblock
-        // and if it's the path of the use in PhiNode
-        if (EndBlocks.find(SpBlock) != EndBlocks.end())
-          return true;
-      }
-#endif
     }
 
     // Can't be in a loop if it's the entry block -- the entry block may not
@@ -422,20 +377,6 @@ bool llvm::isPotentiallyReachableNotViaDef(Instruction *SP, Instruction *USE,
       // pass the incoming block of the specific use in the PHINode
   }
 
-// This fastpath should only work if use is not in PHINode, otherwise we need to
-// be path sensitive and can not rely on the fact
-// the safepoint block dominates all the other blocks.
-#ifdef OPTIMIZED_LIVENESS_ANALYSIS
-  // EntryBlock should dominate all blocks including the useblock,
-  // also def dominates safepoint and therefore they should be in the same block
-  // or def is an argument
-  if (SpBlock == &SpBlock->getParent()->getEntryBlock() && !isa<PHINode>(USE)) {
-    assert((DefIsArg || DefBlock == SpBlock) &&
-           "Def does not dominate safepoint!");
-    return true;
-  }
-#endif
-
   // The opposite as above if use is in the entryblock
   if (UseBlock == &SpBlock->getParent()->getEntryBlock()) {
     assert((DefIsArg || DefBlock == UseBlock) && "Def does not dominate use!");
@@ -447,16 +388,6 @@ bool llvm::isPotentiallyReachableNotViaDef(Instruction *SP, Instruction *USE,
   if (DT && !DT->isReachableFromEntry(UseBlock))
     DT = 0;
 
-// This fastpath should only work if use is not in PHINode, otherwise we need to
-// be path sensitive and can not rely on the fact
-// the safepoint block dominates all the other blocks.
-#ifdef OPTIMIZED_LIVENESS_ANALYSIS
-  // If safepoint dominates use (def should always dominate safepoint), we
-  // cannot reach use via def.
-  if (DT && DT->dominates(SP, USE) && !isa<PHINode>(USE))
-    return true;
-#endif
-
   return isPotentiallyReachableInnerNotViaDef(DefBlock, Worklist, SpBlock,
                                               EndBlocks, DT, LI);
 }
-- 
2.5.0

