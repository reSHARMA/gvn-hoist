From b387bd048729b07dc53bc00f5a9117a3b35ad7ff Mon Sep 17 00:00:00 2001
From: Aditya Kumar <aditya.k7@samsung.com>
Date: Tue, 29 Nov 2016 10:44:15 -0600
Subject: [PATCH 02/10] build dj graph

---
 llvm/lib/Transforms/Scalar/GVNHoist.cpp | 39 +++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/llvm/lib/Transforms/Scalar/GVNHoist.cpp b/llvm/lib/Transforms/Scalar/GVNHoist.cpp
index ba45117b..76b7699 100644
--- a/llvm/lib/Transforms/Scalar/GVNHoist.cpp
+++ b/llvm/lib/Transforms/Scalar/GVNHoist.cpp
@@ -23,6 +23,7 @@
 // Compute kill-sets
 // For -Oz scalars are always safe to hoist.
 // For -O2/-O3 hoist only when the live range improves or remains the same.
+// If we haven't computed dominator tree levels, do so now.
 //===----------------------------------------------------------------------===//
 
 #include "llvm/Transforms/Scalar/GVN.h"
@@ -214,7 +215,45 @@ public:
         MaxNumberOfBBSInPath = -1;
   }
 
+  typedef SmallVector<const BasicBlock *, 4> BBLevelKeyT;
+  typedef DenseMap<unsigned, BBLevelKeyT> BBLevelT;
+  typedef std::pair<const BasicBlock *, const BasicBlock *> EdgeT;
+
+  void constructDJGraph(DenseMap<DomTreeNode *, unsigned> &DomLevels,
+    DenseSet<EdgeT> &JEdges, BBLevelT &BBLevels) {
+    for (auto DFI = df_begin(DT->getRootNode()),
+         DFE = df_end(DT->getRootNode()); DFI != DFE; ++DFI) {
+      unsigned l = DFI.getPathLength() - 1;
+      DomLevels[*DFI] = l;
+      const BasicBlock *BB = (*DFI)->getBlock();
+      BBLevels[l].push_back(BB);
+      for (const BasicBlock *Succ : BB->getTerminator()->successors())
+        if (!DT->properlyDominates(BB, Succ)) {
+          JEdges.insert(std::make_pair(BB, Succ));
+          llvm_unreachable("testcase");
+        }
+    }
+  }
+
+  void printBBLevels(const BBLevelT &BBLevels) {
+    for (const std::pair<unsigned, BBLevelKeyT> &P: BBLevels) {
+      dbgs() << "\nLevel: " << P.first << "\n";
+      for (const BasicBlock* BB: P.second)
+        dbgs() << *BB << "\n";
+    }
+  }
+
+  unsigned constructMergeSet() {
+    DenseMap<DomTreeNode *, unsigned> DomLevels;
+    BBLevelT BBLevels;
+    DenseSet<EdgeT> JEdges;
+    constructDJGraph(DomLevels, JEdges, BBLevels);
+    printBBLevels(BBLevels);
+    return DomLevels.size() + JEdges.size();
+  }
+
   bool run(Function &F) {
+    constructMergeSet();
     VN.setDomTree(DT);
     VN.setAliasAnalysis(AA);
     VN.setMemDep(MD);
-- 
2.6.3

