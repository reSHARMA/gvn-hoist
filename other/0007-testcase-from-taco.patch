From 234a2c102cbe54a35f806d5ba5a6557bdd14b44f Mon Sep 17 00:00:00 2001
From: Aditya Kumar <aditya.k7@samsung.com>
Date: Tue, 29 Nov 2016 10:46:18 -0600
Subject: [PATCH 07/10] testcase-from-taco

---
 .../Transforms/GVNHoist/dj-edge-detect-das-taco.ll | 51 ++++++++++++
 llvm/test/Transforms/GVNHoist/dj-edge-detect.ll    | 97 ++++++++++++++++++++++
 2 files changed, 148 insertions(+)
 create mode 100644 llvm/test/Transforms/GVNHoist/dj-edge-detect-das-taco.ll
 create mode 100644 llvm/test/Transforms/GVNHoist/dj-edge-detect.ll

diff --git a/llvm/test/Transforms/GVNHoist/dj-edge-detect-das-taco.ll b/llvm/test/Transforms/GVNHoist/dj-edge-detect-das-taco.ll
new file mode 100644
index 0000000..d84c1db
--- /dev/null
+++ b/llvm/test/Transforms/GVNHoist/dj-edge-detect-das-taco.ll
@@ -0,0 +1,51 @@
+; RUN: opt -S -gvn-hoist < %s | FileCheck %s
+
+; CHECK: Found a JEdge: bb7 -> bb2
+; CHECK: Found a JEdge: bb6 -> bb5
+; CHECK: Found a JEdge: bb4 -> bb5
+; CHECK: Found a JEdge: bb9 -> bb6
+; CHECK: Found a JEdge: bb5 -> bb6
+; CHECK: Found a JEdge: bb10 -> bb8
+; CHECK: MergeSet of: bb4: bb5,
+; CHECK: MergeSet of: bb7: bb2,
+; CHECK: MergeSet of: bb6: bb5,
+; CHECK: MergeSet of: bb5: bb5, bb6,
+; CHECK: MergeSet of: bb10: bb8,
+; CHECK: MergeSet of: bb2:
+; CHECK: MergeSet of: bb8:
+; CHECK: MergeSet of: bb9: bb5, bb6,
+
+define void @irreducible() {
+bb1:
+br label %bb2
+
+bb2:
+  br i1 undef, label %bb3, label %bb11
+
+bb3:
+  br i1 undef, label %bb4, label %bb8
+
+bb4:
+  br label %bb5
+
+bb5:
+  br label %bb6
+
+bb6:
+  br i1 undef, label %bb7, label %bb5
+
+bb7:
+  br label %bb2
+
+bb8:
+  br label %bb9
+
+bb9:
+  br i1 undef, label %bb6, label %bb10
+
+bb10:
+  br label %bb8
+
+bb11:
+  ret void
+}
diff --git a/llvm/test/Transforms/GVNHoist/dj-edge-detect.ll b/llvm/test/Transforms/GVNHoist/dj-edge-detect.ll
new file mode 100644
index 0000000..cda29fc
--- /dev/null
+++ b/llvm/test/Transforms/GVNHoist/dj-edge-detect.ll
@@ -0,0 +1,97 @@
+; RUN: opt -S -gvn-hoist < %s | FileCheck %s
+
+; ModuleID = '<stdin>'
+source_filename = "<stdin>"
+
+; CHECK: Found a JEdge: bb18 -> bb6
+; CHECK: Found a JEdge: bb2 -> bb3
+; CHECK: Found a JEdge: bb15 -> bb18
+; CHECK: Found a JEdge: bb13 -> bb18
+; CHECK: Found a JEdge: bb10 -> bb18
+; CHECK: Found a JEdge: bb8 -> bb18
+
+%0 = type { %1*, %8* }
+%1 = type { %2*, %3* }
+%2 = type { i32, i32, i32, i32, i32*, i8*, i32 }
+%3 = type { %4, i32, i32, %7*, i8, i8, i8, i8, i8 }
+%4 = type { i8, i32, i8*, %5 }
+%5 = type { %6 }
+%6 = type { i16 }
+%7 = type { i8*, i8*, i8*, i8*, i8* }
+%8 = type <{ i8*, i8*, i32, %9, %17*, %19* }>
+%9 = type { %10*, i8*, i8*, i8* (i8*)*, i32* (i8*)*, i8*, %15, i32, i32, i8*, %16*, i32, i8, i8*, i8, i8* }
+%10 = type { i8*, %11*, i8*, %12, %13*, i8*, i32 (i8*)*, i32, i8, %14 }
+%11 = type { i8*, i32 (i8*, %12*, i8*)*, i32 (i8*)*, i32 (i8*, i32)*, %16* (i8*)*, i32 (i8*)*, i32 (i8*)*, i32 (...)*, i32 (...)*, i32 (...)*, void (i8*, i32)*, void (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*)* }
+%12 = type { i8*, i32 (i8*, i32, i8*, i32, i8)*, i32 (i8*, i32, i8*)*, void (i8*, i8*, i32)*, i32 (i8*)*, i32 (i8*, i32, i32)* }
+%13 = type { i32 (i8*, i8*, i32)*, i32 (i8*, i32, i32)* }
+%14 = type { i32, i32, i8, i8, i8 }
+%15 = type { i32, i32, i32 }
+%16 = type { i16, i16, i32, i32 }
+%17 = type { i8*, i8*, i16 (i8*, i8*, i16)*, i32 (i8*, i8, i32)*, i32 (%16*, i32)*, %18, i32, i32 }
+%18 = type { i8*, i8* (i8*, i8*, i32)* }
+%19 = type { %20, i32, i32 }
+%20 = type { i32, i32, [8 x i8], i8, i8, i16 }
+
+@global = external hidden unnamed_addr constant [10 x i8], align 1
+
+define void @ham(i8* nocapture readnone %arg) local_unnamed_addr {
+bb:
+  %tmp = alloca %0*, align 8
+  %tmp1 = bitcast %0** %tmp to i8*
+  br label %bb3
+
+bb2:                                              ; preds = %bb6
+  br label %bb3
+
+bb3:                                              ; preds = %bb2, %bb
+  %tmp4 = load %0*, %0** %tmp, align 8, !tbaa !0
+  %tmp5 = call i32 @quux(i8* %tmp1)
+  br label %bb6
+
+bb6:                                              ; preds = %bb18, %bb3
+  %tmp7 = phi i32 [ %tmp5, %bb3 ], [ %tmp19, %bb18 ]
+  switch i32 %tmp7, label %bb15 [
+    i32 0, label %bb2
+    i32 35, label %bb8
+    i32 11, label %bb10
+    i32 12, label %bb13
+  ]
+
+bb8:                                              ; preds = %bb6
+  %tmp9 = load %0*, %0** %tmp, align 8, !tbaa !0
+  br label %bb18
+
+bb10:                                             ; preds = %bb6
+  %tmp11 = load %0*, %0** %tmp, align 8, !tbaa !0
+  %tmp12 = call i32 @quux(i8* %tmp1)
+  br label %bb18
+
+bb13:                                             ; preds = %bb6
+  %tmp14 = call i32 @quux(i8* %tmp1)
+  br label %bb18
+
+bb15:                                             ; preds = %bb6
+  %tmp16 = load %0*, %0** %tmp, align 8, !tbaa !0
+  %tmp17 = call i32 @quux(i8* null)
+  br label %bb18
+
+bb18:                                             ; preds = %bb15, %bb13, %bb10, %bb8
+  %tmp19 = phi i32 [ %tmp17, %bb15 ], [ %tmp14, %bb13 ], [ %tmp12, %bb10 ], [ 0, %bb8 ]
+  br label %bb6
+}
+
+; Function Attrs: argmemonly nounwind
+declare void @llvm.lifetime.start(i64, i8* nocapture) #0
+
+declare i32 @zot(%0**)
+
+declare i32 @quux(i8*)
+
+declare i32 @wombat(i8* nocapture readonly, ...)
+
+attributes #0 = { argmemonly nounwind }
+
+!0 = !{!1, !1, i64 0}
+!1 = !{!"any pointer", !2, i64 0}
+!2 = !{!"omnipotent char", !3, i64 0}
+!3 = !{!"Simple C/C++ TBAA"}
-- 
2.6.3

