From 9e1be1d507eaf1cec3785f7bd6ebd78b32aee76d Mon Sep 17 00:00:00 2001
From: hiraditya <hiraditya@gmail.com>
Date: Fri, 25 Nov 2016 12:17:29 -0600
Subject: [PATCH 06/12] build dj graph

---
 lib/Analysis/CFG.cpp               |  8 +++-----
 lib/Transforms/Scalar/GVNHoist.cpp | 39 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 42 insertions(+), 5 deletions(-)

diff --git a/lib/Analysis/CFG.cpp b/lib/Analysis/CFG.cpp
index b643451..d131886 100644
--- a/lib/Analysis/CFG.cpp
+++ b/lib/Analysis/CFG.cpp
@@ -288,13 +288,11 @@ bool llvm::isPotentiallyReachableNotViaDef(Instruction *SP, Instruction *USE,
 
   bool DefIsArg = isa<Argument>(DEF);
 
-  BasicBlock *UseBlock = const_cast<BasicBlock *>(USE->getParent());
-  BasicBlock *SpBlock = const_cast<BasicBlock *>(SP->getParent());
+  BasicBlock *UseBlock = USE->getParent();
+  BasicBlock *SpBlock = SP->getParent();
 
   // def could be an argument which has no basicblock
-  BasicBlock *DefBlock =
-      DefIsArg ? NULL
-               : const_cast<BasicBlock *>(cast<Instruction>(DEF)->getParent());
+  BasicBlock *DefBlock = DefIsArg ? NULL : cast<Instruction>(DEF)->getParent();
 
   // If use is live at the original call site which triggers the safepoint, it
   // will be live during the call
diff --git a/lib/Transforms/Scalar/GVNHoist.cpp b/lib/Transforms/Scalar/GVNHoist.cpp
index ba45117b..76b7699 100644
--- a/lib/Transforms/Scalar/GVNHoist.cpp
+++ b/lib/Transforms/Scalar/GVNHoist.cpp
@@ -23,6 +23,7 @@
 // Compute kill-sets
 // For -Oz scalars are always safe to hoist.
 // For -O2/-O3 hoist only when the live range improves or remains the same.
+// If we haven't computed dominator tree levels, do so now.
 //===----------------------------------------------------------------------===//
 
 #include "llvm/Transforms/Scalar/GVN.h"
@@ -214,7 +215,45 @@ public:
         MaxNumberOfBBSInPath = -1;
   }
 
+  typedef SmallVector<const BasicBlock *, 4> BBLevelKeyT;
+  typedef DenseMap<unsigned, BBLevelKeyT> BBLevelT;
+  typedef std::pair<const BasicBlock *, const BasicBlock *> EdgeT;
+
+  void constructDJGraph(DenseMap<DomTreeNode *, unsigned> &DomLevels,
+    DenseSet<EdgeT> &JEdges, BBLevelT &BBLevels) {
+    for (auto DFI = df_begin(DT->getRootNode()),
+         DFE = df_end(DT->getRootNode()); DFI != DFE; ++DFI) {
+      unsigned l = DFI.getPathLength() - 1;
+      DomLevels[*DFI] = l;
+      const BasicBlock *BB = (*DFI)->getBlock();
+      BBLevels[l].push_back(BB);
+      for (const BasicBlock *Succ : BB->getTerminator()->successors())
+        if (!DT->properlyDominates(BB, Succ)) {
+          JEdges.insert(std::make_pair(BB, Succ));
+          llvm_unreachable("testcase");
+        }
+    }
+  }
+
+  void printBBLevels(const BBLevelT &BBLevels) {
+    for (const std::pair<unsigned, BBLevelKeyT> &P: BBLevels) {
+      dbgs() << "\nLevel: " << P.first << "\n";
+      for (const BasicBlock* BB: P.second)
+        dbgs() << *BB << "\n";
+    }
+  }
+
+  unsigned constructMergeSet() {
+    DenseMap<DomTreeNode *, unsigned> DomLevels;
+    BBLevelT BBLevels;
+    DenseSet<EdgeT> JEdges;
+    constructDJGraph(DomLevels, JEdges, BBLevels);
+    printBBLevels(BBLevels);
+    return DomLevels.size() + JEdges.size();
+  }
+
   bool run(Function &F) {
+    constructMergeSet();
     VN.setDomTree(DT);
     VN.setAliasAnalysis(AA);
     VN.setMemDep(MD);
-- 
2.5.0

